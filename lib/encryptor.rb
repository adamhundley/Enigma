require_relative 'rotation_generator'  # => true

class Encryptor
  attr_reader :message, :rotation, :character_map  # => nil

  def initialize(message, key, date)
    @message = message.chars                      # => ["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."]
    @rotation = RotationGenerator.new(key, date)  # => #<RotationGenerator:0x007fdcfb023bd8 @key="69453", @date=151217>
    @character_map = create_character_map         # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
  end

  def create_character_map
    character_map = %w(a b c d e f g h i j k l m n o p q r
    s t u v w x y z 0 1 2 3 4 5 6 7 8 9)  # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    character_map << " " << "." << ","    # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
  end

  def find_message_character_values
    message.map do |character|        # => ["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."], ["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."], ["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."], ["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."]
      character_map.index(character)  # => 19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37, 19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37, 19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37, 19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37
    end                               # => [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37], [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37], [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37], [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37]
  end

  def split_character_value_into_groups_of_four
    groups_of_four = []                                         # => [], [], []
    find_message_character_values.each_slice(4) do |character|  # => [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37], [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37], [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37]
    groups_of_four << character                                 # => [[19, 7, 8, 18]], [[19, 7, 8, 18], [36, 8, 18, 36]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18]], [[19, 7, 8, 18], [36, 8, 18, 36]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18]], [[19, 7, 8, 18], [36, 8, 18, 36]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]]
    end                                                         # => nil, nil, nil
    groups_of_four                                              # => [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]]
  end

  def add_final_encryptor_values
    final_encryptor_values = []                                # => [], []
    split_character_value_into_groups_of_four.each do |group|  # => [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]]
      group.each_with_index do |character, index|              # => [19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37], [19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]
        if index == 0                                          # => true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true
          a_final_rotation = rotation.a_rotation + character   # => 89, 106, 70, 88, 74, 107, 89, 106, 70, 88, 74, 107
          final_encryptor_values << a_final_rotation % 39      # => [11], [11, 23, 22, 2, 28], [11, 23, 22, 2, 28, 24, 32, 20, 31], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29], [11], [11, 23, 22, 2, 28], [11, 23, 22, 2, 28, 24, 32, 20, 31], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29]
        elsif index == 1                                       # => true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false
          b_final_rotation = rotation.b_rotation + character   # => 101, 102, 130, 113, 107, 101, 102, 130, 113, 107
          final_encryptor_values << b_final_rotation % 39      # => [11, 23], [11, 23, 22, 2, 28, 24], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29], [11, 23], [11, 23, 22, 2, 28, 24], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29]
        elsif index == 2                                       # => true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false
          c_final_rotation = rotation.c_rotation + character   # => 61, 71, 72, 90, 56, 61, 71, 72, 90, 56
          final_encryptor_values << c_final_rotation % 39      # => [11, 23, 22], [11, 23, 22, 2, 28, 24, 32], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17], [11, 23, 22], [11, 23, 22, 2, 28, 24, 32], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17]
        else index == 3                                        # => true, true, true, true, true, true, true, true, true, true
          d_final_rotation = rotation.d_rotation + character   # => 80, 98, 66, 99, 99, 80, 98, 66, 99, 99
          final_encryptor_values << d_final_rotation % 39      # => [11, 23, 22, 2], [11, 23, 22, 2, 28, 24, 32, 20], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21], [11, 23, 22, 2], [11, 23, 22, 2, 28, 24, 32, 20], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21]
        end                                                    # => [11], [11, 23], [11, 23, 22], [11, 23, 22, 2], [11, 23, 22, 2, 28], [11, 23, 22, 2, 28, 24], [11, 23, 22, 2, 28, 24, 32], [11, 23, 22, 2, 28, 24, 32, 20], [11, 23, 22, 2, 28, 24, 32, 20, 31], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29], [11], [11, 23], [11, 23, 22], [11, 23, 22, 2], [11, 23, 22, 2, 28], [11, 23, 22, 2, 28, 24], [11, 23, 22, 2, 28, 24, 32], [11, 23, 22, 2, 28, 24, 32, 20], [11, 23, 22, 2, 28, 24, 32, 20, 31], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29]
      end                                                      # => [19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37], [19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]
    end                                                        # => [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]], [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]]
    final_encryptor_values                                     # => [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29], [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29]
  end

  def encrypt_values_to_characters
    final_message = add_final_encryptor_values.map do |value|  # => [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29]
      character_map[value]                                     # => "l", "x", "w", "c", "2", "y", "6", "u", "5", "n", "7", "1", "k", "9", "m", "v", "9", "3", "r", "v", "3"
    end                                                        # => ["l", "x", "w", "c", "2", "y", "6", "u", "5", "n", "7", "1", "k", "9", "m", "v", "9", "3", "r", "v", "3"]
    final_message.join                                         # => "lxwc2y6u5n71k9mv93rv3"
  end
end


test = Encryptor.new("this is a test..end..", 69453, 151217)  # => #<Encryptor:0x007fdcfb0284a8 @message=["t", "h", "i", "s", " ", "i", "s", " ", "a", " ", "t", "e", "s", "t", ".", ".", "e", "n", "d", ".", "."], @rotation=#<RotationGenerator:0x007fdcfb023bd8 @key="69453", @date=151217>, @character_map=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>
test.create_character_map                                     # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
test.find_message_character_values                            # => [19, 7, 8, 18, 36, 8, 18, 36, 0, 36, 19, 4, 18, 19, 37, 37, 4, 13, 3, 37, 37]
test.split_character_value_into_groups_of_four                # => [[19, 7, 8, 18], [36, 8, 18, 36], [0, 36, 19, 4], [18, 19, 37, 37], [4, 13, 3, 37], [37]]
test.add_final_encryptor_values                               # => [11, 23, 22, 2, 28, 24, 32, 20, 31, 13, 33, 27, 10, 35, 12, 21, 35, 29, 17, 21, 29]
test.encrypt_values_to_characters                             # => "lxwc2y6u5n71k9mv93rv3"
