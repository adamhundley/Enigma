require_relative 'rotation_generator'  # => true

class Encryptor
  attr_reader :message, :rotation, :character_map  # => nil

  def initialize(message, key, date)
    @message = message.chars                      # => ["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."]
    @rotation = RotationGenerator.new(key, date)  # => #<RotationGenerator:0x007ff60a948740 @key="45423", @date=141215>
    @character_map = create_character_map         # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
  end

  def create_character_map
    character_map = %w(a b c d e f g h i j k l m n o p q r
    s t u v w x y z 0 1 2 3 4 5 6 7 8 9)  # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
    character_map << " " << "." << ","    # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","], ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
  end

  def find_message_character_values
    @message.map do |character|       # => ["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."], ["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."], ["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."], ["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."]
      character_map.index(character)  # => 15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37, 15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37, 15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37, 15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37
    end                               # => [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37], [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37], [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37], [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37]
  end

  def character_value_into_groups_of_four
    character_values_in_group_of_four = []                      # => [], [], []
    find_message_character_values.each_slice(4) do |character|  # => [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37], [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37], [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37]
    character_values_in_group_of_four << character              # => [[15, 11, 4, 0]], [[15, 11, 4, 0], [18, 4, 36, 5]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0]], [[15, 11, 4, 0], [18, 4, 36, 5]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0]], [[15, 11, 4, 0], [18, 4, 36, 5]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]]
    end                                                         # => nil, nil, nil
    character_values_in_group_of_four                           # => [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]]
  end

  def add_final_encryptor_values   # rotations = [keys, offsets].transpose.map {|rotation| rotation.reduce(:+)}
    final_encryptor_values = []                               # => [], []
    character_value_into_groups_of_four.each do |group|       # => [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]]
      group.each_with_index do |character, index|             # => [15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37], [15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]
        if index == 0                                         # => true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false, false, false, true, false
          a_final_rotation = rotation.a_rotation + character  # => 66, 69, 71, 64, 65, 88, 88, 66, 69, 71, 64, 65, 88, 88
          final_encryptor_values << a_final_rotation % 39     # => [27], [27, 28, 9, 28, 30], [27, 28, 9, 28, 30, 21, 2, 33, 32], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10], [27], [27, 28, 9, 28, 30], [27, 28, 9, 28, 30, 21, 2, 33, 32], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10]
        elsif index == 1                                      # => true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true, false, false, true
          b_final_rotation = rotation.b_rotation + character  # => 67, 60, 58, 62, 73, 60, 93, 67, 60, 58, 62, 73, 60, 93
          final_encryptor_values << b_final_rotation % 39     # => [27, 28], [27, 28, 9, 28, 30, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15], [27, 28], [27, 28, 9, 28, 30, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15]
        elsif index == 2                                      # => true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false
          c_final_rotation = rotation.c_rotation + character  # => 48, 80, 54, 80, 54, 57, 48, 80, 54, 80, 54, 57
          final_encryptor_values << c_final_rotation % 39     # => [27, 28, 9], [27, 28, 9, 28, 30, 21, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18], [27, 28, 9], [27, 28, 9, 28, 30, 21, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18]
        else index == 3                                       # => true, true, true, true, true, true, true, true, true, true, true, true
          d_final_rotation = rotation.d_rotation + character  # => 28, 33, 36, 50, 65, 31, 28, 33, 36, 50, 65, 31
          final_encryptor_values << d_final_rotation % 39     # => [27, 28, 9, 28], [27, 28, 9, 28, 30, 21, 2, 33], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31], [27, 28, 9, 28], [27, 28, 9, 28, 30, 21, 2, 33], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31]
        end                                                   # => [27], [27, 28], [27, 28, 9], [27, 28, 9, 28], [27, 28, 9, 28, 30], [27, 28, 9, 28, 30, 21], [27, 28, 9, 28, 30, 21, 2], [27, 28, 9, 28, 30, 21, 2, 33], [27, 28, 9, 28, 30, 21, 2, 33, 32], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15], [27], [27, 28], [27, 28, 9], [27, 28, 9, 28], [27, 28, 9, 28, 30], [27, 28, 9, 28, 30, 21], [27, 28, 9, 28, 30, 21, 2], [27, 28, 9, 28, 30, 21, 2, 33], [27, 28, 9, 28, 30, 21, 2, 33, 32], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15]
      end                                                     # => [15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37], [15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]
    end                                                       # => [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]], [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]]
    final_encryptor_values                                    # => [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15], [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15]
  end

  def encrypt_values_to_characters
    final_message = add_final_encryptor_values.map do |value|  # => [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15]
      character_map[value]                                     # => "1", "2", "j", "2", "4", "v", "c", "7", "6", "t", "p", " ", "z", "x", "c", "l", "0", "8", "p", "0", "k", "v", "s", "5", "k", "p"
    end                                                        # => ["1", "2", "j", "2", "4", "v", "c", "7", "6", "t", "p", " ", "z", "x", "c", "l", "0", "8", "p", "0", "k", "v", "s", "5", "k", "p"]
    final_message.join                                         # => "12j24vc76tp zxcl08p0kvs5kp"
  end
end

#
test = Encryptor.new("please fucking work..end..", 45423, 141215)  # => #<Encryptor:0x007ff60a9492f8 @message=["p", "l", "e", "a", "s", "e", " ", "f", "u", "c", "k", "i", "n", "g", " ", "w", "o", "r", "k", ".", ".", "e", "n", "d", ".", "."], @rotation=#<RotationGenerator:0x007ff60a948740 @key="45423", @date=141215>, @character_map=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]>
test.create_character_map                                          # => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", ".", ","]
test.find_message_character_values                                 # => [15, 11, 4, 0, 18, 4, 36, 5, 20, 2, 10, 8, 13, 6, 36, 22, 14, 17, 10, 37, 37, 4, 13, 3, 37, 37]
test.character_value_into_groups_of_four                           # => [[15, 11, 4, 0], [18, 4, 36, 5], [20, 2, 10, 8], [13, 6, 36, 22], [14, 17, 10, 37], [37, 4, 13, 3], [37, 37]]
test.add_final_encryptor_values                                    # => [27, 28, 9, 28, 30, 21, 2, 33, 32, 19, 15, 36, 25, 23, 2, 11, 26, 34, 15, 26, 10, 21, 18, 31, 10, 15]
test.encrypt_values_to_characters                                  # => "12j24vc76tp zxcl08p0kvs5kp"
